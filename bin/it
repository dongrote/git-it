#!/usr/bin/python
#
# Command-line access to the base implementation of git-it.
#
import sys
from argparse import ArgumentParser
from gitit.gitit import Gitit

class Commander(object):
    @staticmethod
    def create_init_parser(subparser):
        parser = subparser.add_parser('init',
            help='initialize issue tracking database')
        return parser

    @staticmethod
    def do_init(gitobj, args):
        gitobj.init()
        return 0

    @staticmethod
    def create_list_parser(subparser):
        parser = subparser.add_parser('list', help='List issues')
        parser.add_argument('-a', '--all', action='store_true', default=False,
            help='list all tickets, including those that are not open')
        return parser

    @staticmethod
    def do_list(gitobj, args):
        types = ['open', 'test']
        if args.all:
            types += [ 'closed', 'fixed', 'rejected' ]
        gitobj.list(types)
        return 0

    @staticmethod
    def create_show_parser(subparser):
        parser = subparser.add_parser('show',
            help='show details of a specific issue')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_show(gitobj, args):
        gitobj.show(args.ticket)
        return 0

    @staticmethod
    def create_new_parser(subparser):
        parser = subparser.add_parser('new', help='create a new issue')
        return parser

    @staticmethod
    def do_new(gitobj, args):
        ticket = gitobj.new()
        gitobj.edit(ticket.id)
        return 0

    @staticmethod
    def create_edit_parser(subparser):
        parser = subparser.add_parser('edit', help='edit an existing issue')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_edit(gitobj, args):
        gitobj.edit(args.ticket)
        return 0

    @staticmethod
    def create_rm_parser(subparser):
        parser = subparser.add_parser('rm', help='remove an existing issue')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_rm(gitobj, args):
        gitobj.rm(args.ticket)
        return 0

    @staticmethod
    def create_mv_parser(subparser):
        parser = subparser.add_parser('mv',
            help='move a given ticket to a different/new release')
        parser.add_argument('ticket')
        parser.add_argument('release')
        return parser

    @staticmethod
    def do_mv(gitobj, args):
        gitobj.mv(args.ticket, args.release)

    @staticmethod
    def create_push_parser(subparser):
        parser = subparser.add_parser('push', help='push changes to origin')
        return parser

    @staticmethod
    def do_push(gitobj, args):
        gitobj.push()
        return 0

    @staticmethod
    def create_pull_parser(subparser):
        parser = subparser.add_parser('pull',
            help='pull ticket changes from origin')
        return parser

    @staticmethod
    def do_pull(gitobj, args):
        gitobj.pull()
        return 0

    @staticmethod
    def create_take_parser(subparser):
        parser = subparser.add_parser('take',
            help='take ownership of an existing issue')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_take(gitobj, args):
        gitobj.take_ticket(args.ticket)
        return 0

    @staticmethod
    def create_assign_parser(subparser):
        parser = subparser.add_parser('assign',
            help='assign ownership of an existing issue to a developer')
        parser.add_argument('ticket')
        parser.add_argument('owner')
        return parser

    @staticmethod
    def do_assign(gitobj, args):
        gitobj.assign_ticket(args.ticket, args.owner)
        return 0

    @staticmethod
    def create_release_parser(subparser):
        parser = subparser.add_parser('release',
            help='release ownership of an issue you currently own')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_release(gitobj, args):
        gitobj.leave_ticket(args.ticket)
        return 0

    @staticmethod
    def create_test_parser(subparser):
        parser = subparser.add_parser('test', help='mark an issue as to-test')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_test(gitobj, args):
        gitobj.finish_ticket(args.ticket, 'test')
        return 0

    @staticmethod
    def create_close_parser(subparser):
        parser = subparser.add_parser('close', help='mark an issue as closed')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_close(gitobj, args):
        gitobj.finish_ticket(args.ticket, 'closed')
        return 0

    @staticmethod
    def create_fix_parser(subparser):
        parser = subparser.add_parser('fix', help='mark an issue as fixed')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_fix(gitobj, args):
        gitobj.finish_ticket(args.ticket, 'fixed')
        return 0

    @staticmethod
    def create_reject_parser(subparser):
        parser = subparser.add_parser('reject', help='mark an issue as rejected')
        parser.add_argument('ticket')
        parser.add_argument('-m', '--message', help='rejetion message',
            default=None)
        return parser

    @staticmethod
    def do_reject(gitobj, args):
        # TODO incorporate rejection message before closing up ticket
        gitobj.finish_ticket(args.ticket, 'rejected')
        return 0

    @staticmethod
    def create_reopen_parser(subparser):
        parser = subparser.add_parser('reopen', help='reopen an issue')
        parser.add_argument('ticket')
        return parser

    @staticmethod
    def do_reopen(gitobj, args):
        gitobj.reopen_ticket(args.ticket)
        return 0


def main():
    # Parse input options
    parser = ArgumentParser()
    subparser = parser.add_subparsers(dest='cmd')
    Commander.create_init_parser(subparser)
    Commander.create_list_parser(subparser)
    Commander.create_show_parser(subparser)
    Commander.create_new_parser(subparser)
    Commander.create_edit_parser(subparser)
    Commander.create_rm_parser(subparser)
    Commander.create_mv_parser(subparser)
    Commander.create_push_parser(subparser)
    Commander.create_pull_parser(subparser)
    Commander.create_take_parser(subparser)
    Commander.create_assign_parser(subparser)
    Commander.create_release_parser(subparser)
    Commander.create_test_parser(subparser)
    Commander.create_close_parser(subparser)
    Commander.create_fix_parser(subparser)
    Commander.create_reject_parser(subparser)
    Commander.create_reopen_parser(subparser)

    args = parser.parse_args(sys.argv[1:])
    return getattr(Commander, 'do_%s' % args.cmd)(Gitit(),args)

if '__main__' == __name__:
    sys.exit(main())
